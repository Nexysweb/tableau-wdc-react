{"version":3,"sources":["lib/utils.ts","lib/config.ts","lib/init.tsx","example.tsx","index.tsx"],"names":["strSanitize","s","i","replace","ghUrl","github","sha","process","url","version","Init","props","config","reports","myConnector","tableau","makeConnector","getSchema","schemaCallback","map","r","report","id","alias","columns","colLabel","c","name","dataType","type","dataTypeEnum","string","U","getData","table","doneCallback","tableInfo","options","method","fetch","then","resp","json","jResponse","tabular","mapping","console","log","tableData","content","row","col","j","v","push","appendRows","registerConnector","exec","connectionName","submit","setTimeout","onClick","href","Config","prefix","float","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAmBaA,EAAc,SAACC,EAAWC,GACrC,MAAU,MAAND,GAAmB,KAANA,EACRA,EAAEE,QAAQ,YAAa,KAIzB,aAAeD,GCvBlBE,EAAQ,gDACDC,EAAS,CACpBC,IAAI,GAAD,OAAKF,EAAL,mBAHcG,4CAIjBC,IAAKJ,EACLK,QAAQ,GAAD,OAAKL,EAAL,yBANcG,WC8ERG,EAzEF,SAACC,GACZ,IAAQC,EAAWD,EAAXC,OACAC,EAAYD,EAAZC,QAEFC,EAAcC,QAAQC,gBAG5BF,EAAYG,UAAY,SACtBC,GAIAA,EAFsBL,EAAQM,KAAI,SAACC,GAAD,OFmDN,SAACC,GAAD,MAAiC,CAC/DC,GAAID,EAAOC,GACXC,MAAOF,EAAOE,MACdC,SAbAC,EAawCJ,EAAOG,QAX/CC,EAASN,KAAI,SAACO,EAAgBxB,GAC5B,MAAO,CACLoB,GAAItB,EAAY0B,EAAEC,KAAMzB,GACxBqB,MAAOG,EAAEC,KACTC,SAAUF,EAAEG,MAAQd,QAAQe,aAAaC,aAPD,IAC5CN,EEzC2CO,CAAmBZ,QAM9DN,EAAYmB,QAAU,SACpBC,EACAC,GAEAtB,EAAQM,KAAI,SAACC,GACX,GAAIc,EAAME,UAAUd,KAAOF,EAAEE,GAAI,CAC/B,IAAMe,EAAuB,CAC3BC,OAAQlB,EAAEkB,QAGZC,MAAMnB,EAAEZ,IAAK6B,GAASG,MAAK,SAACC,GAC1BA,EAAKC,OAAOF,MAAK,SAACG,GAChB,IAAMC,EAA6BxB,EAAEyB,QACjCzB,EAAEyB,QAAQF,GACTA,EACLG,QAAQC,IAAIH,GACZ,IAAMI,EFNuB,SAAC,EAExCvB,GACe,IAAD,mBAFVwB,GAEU,WAERD,EAAuB,GAgB7B,OAbAC,EAAQ9B,KAAI,SAAC+B,GACX,IAAMxB,EAA8B,GASpC,OAPAD,EAASN,KAAI,SAACgC,EAAkBC,GAC9B,IAAMC,EAAIH,EAAIE,GAEd,OADA1B,EAAE1B,EAAYmD,EAAIxB,KAAMyB,IAAMC,GACvB,KAGTL,EAAUM,KAAM5B,IACT,KAGFsB,EEfqBhB,CAA4BY,EAASxB,EAAEI,SACzDU,EAAMqB,WAAWP,GACjBb,UAKN,OAAO,MAIXpB,QAAQyC,kBAAkB1C,GAE1B,IAAM2C,EAAO,WACX1C,QAAQ2C,eAAiB9C,EAAOe,KAChCZ,QAAQ4C,UAQV,OAJAC,YAAW,WACTH,MACC,KAGD,oCACE,4IAIA,4BAAQnC,GAAG,eAAeuC,QAASJ,GAAnC,wBAGA,2BACE,+BACE,uBAAGK,KAAMC,EAActD,SDvEVF,cE2BjBK,EAAkB,CAACe,KAAM,eAAgBd,QADpB,CARF,CACvBS,GAAI,WACJC,MAAO,gBACPf,IALUwD,+BAMV1B,OAAQ,MACRd,QAlB4B,CAC5B,CAACG,KAAM,MAAOE,KAAMd,QAAQe,aAAamC,OACzC,CAACtC,KAAM,OACP,CAACA,KAAM,SACP,CAACA,KAAM,QACP,CAACA,KAAM,QACP,CAACA,KAAM,OACP,CAACA,KAAM,aAkBM,oBAAM,kBAAC,EAAD,CAAMf,OAAQA,KC1BnCsD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,6FAAkE,uBAAGN,KAAK,yDAAR,aAAlE,QAAoJ,kCAApJ,4BACA,kBAAC,EAAD,OAEFO,SAASC,eAAe,W","file":"static/js/main.2b046b42.chunk.js","sourcesContent":["// index.ts\nimport * as T from \"./type\";\n//import tableau from './tableau.d';\n\n// Read a page's GET URL variables and return them as an associative array.\nexport const getParameterByName = (\n  name: string,\n  url?: string\n): string | null => {\n  if (!url) url = window.location.href;\n  name = name.replace(/[[]]/g, \"\\\\$&\"); //name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n    results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return \"\";\n  return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n};\n\n// tableau needs \"well-formatted\" object keys. This function helps turn any key/string into a tableau-ok object key\nexport const strSanitize = (s: string, i?: number | string): string => {\n  if (s !== \" \" && s !== \"\") {\n    return s.replace(/[^\\w\\d_]/g, \"_\");\n    //.replace(/ /g, '_').replace('/test', '_').replace('?', '_').replace('\\'', '_').replace('(', '_').replace(')', '_');\n  }\n\n  return \"undefined_\" + i;\n};\n\n// map the output of the array strcuture onto a tableau compatible structure\n// param resp: response of the ajax call (which is an array of arrays)\n// pararm colLabel: the headers pre defined (note that this is also the first row of the rerponse)\nexport const mapArrayOntoTableauStruct = (\n  [_, content]: T.ServiceResponse,\n  colLabel: T.ColumnDef[]\n): T.Tabular => {\n  // init output table\n  const tableData: T.Tabular = [];\n\n  // Iterate over the array\n  content.map((row) => {\n    const c: { [k: string]: T.Value } = {};\n\n    colLabel.map((col: T.ColumnDef, j: number) => {\n      const v = row[j];\n      c[strSanitize(col.name, j)] = v;\n      return true;\n    });\n\n    tableData.push((c as unknown) as T.Value[]); // casting here otherwise does not work with TS definitions\n    return true;\n  });\n\n  return tableData;\n};\n\nexport const tableauColumnsFromArrayHeaders = (\n  colLabel: T.ColumnDef[]\n): T.SchemaColumn[] =>\n  colLabel.map((c: T.ColumnDef, i: number) => {\n    return {\n      id: strSanitize(c.name, i),\n      alias: c.name,\n      dataType: c.type || tableau.dataTypeEnum.string,\n    };\n  });\n\nexport const schemaFromReport = (report: T.Report): T.Schema => ({\n  id: report.id,\n  alias: report.alias,\n  columns: tableauColumnsFromArrayHeaders(report.columns),\n});\n","export const version = process.env.REACT_APP_VERSION || 'unset_version';\nexport const sha = process.env.REACT_APP_GIT_SHA || 'unset_sha';\nconst ghUrl = 'https://github.com/Nexysweb/tableau-wdc-react';\nexport const github = {\n  sha: `${ghUrl}/commit/${sha}`,\n  url: ghUrl,\n  version: `${ghUrl}/releases/tag/${version}`\n};\n","import React from \"react\";\nimport * as T from \"./type\";\nimport * as U from \"./utils\";\nimport * as Config from './config';\n\nconst Init = (props: { config: T.Config }): JSX.Element => {\n  const { config } = props;\n  const { reports } = config;\n  // Create the connector object\n  const myConnector = tableau.makeConnector();\n\n  // Define the schema\n  myConnector.getSchema = function (\n    schemaCallback: (tableInfo: tableau.TableInfo[]) => void\n  ) {\n    const r: T.Schema[] = reports.map((r) => U.schemaFromReport(r));\n\n    schemaCallback(r);\n  };\n\n  // Download the data\n  myConnector.getData = function (\n    table: tableau.Table,\n    doneCallback: tableau.DataDoneCallback\n  ) {\n    reports.map((r) => {\n      if (table.tableInfo.id === r.id) {\n        const options: RequestInit = {\n          method: r.method,\n        };\n\n        fetch(r.url, options).then((resp: Response) => {\n          resp.json().then((jResponse: any) => {\n            const tabular: T.ServiceResponse = r.mapping\n              ? r.mapping(jResponse)\n              : (jResponse as T.ServiceResponse);\n            console.log(tabular);\n            const tableData = U.mapArrayOntoTableauStruct(tabular, r.columns);\n            table.appendRows(tableData);\n            doneCallback();\n          });\n        });\n      }\n\n      return true;\n    });\n  };\n\n  tableau.registerConnector(myConnector);\n\n  const exec = (): void => {\n    tableau.connectionName = config.name; // This will be the data source name in Tableau\n    tableau.submit(); // This sends the connector object to Tableau\n  };\n\n  // execute exec after one second\n  setTimeout(function () {\n    exec();\n  }, 1000);\n\n  return (\n    <>\n      <p>\n        This page should disappear once data is loaded, if (and only if) this\n        does not work click on the button below\n      </p>\n      <button id=\"submitButton\" onClick={exec}>\n        Get data and connect\n      </button>\n      <p>\n        <small>\n          <a href={Config.github.version}>{Config.version}</a>\n        </small>\n      </p>\n    </>\n  );\n};\n\nexport default Init;\n","import React from 'react';\n\nimport { T, Init } from './lib';\n\n// start parameters definition\nconst columns:T.ColumnDef[] = [\n  {name: 'one', type: tableau.dataTypeEnum.float},\n  {name: 'two'},\n  {name: 'three'},\n  {name: 'four'},\n  {name: 'five'},\n  {name: 'six'},\n  {name: 'seven'}\n];\n\nconst prefix = '/tableau-wdc-react'; // note this is required for GH pages\nconst url = prefix + '/data.json'\n\nconst report1:T.Report = {\n  id: 'dataFeed',\n  alias: 'dataFeedAlias',\n  url,\n  method: 'GET',\n  columns\n};\n\nconst reports:T.Report[] = [report1];\nconst config:T.Config = {name: 'My Data Feed', reports};\n// end parameters defintion\n\nexport default () => <Init config={config}/>\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./example\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <p>Make sure this page is run from either Tableau directly or the <a href=\"https://tableau.github.io/webdataconnector/Simulator/\">simulator</a> but <b>not</b> directly in the browser</p>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}