{"version":3,"sources":["lib/utils.ts","lib/init.tsx","example.tsx","serviceWorker.ts","index.tsx"],"names":["strSanitize","s","i","replace","sha","process","init","props","config","reports","myConnector","tableau","makeConnector","getSchema","schemaCallback","map","r","report","id","alias","columns","colLabel","c","name","dataType","type","dataTypeEnum","string","U","getData","table","doneCallback","tableInfo","options","method","fetch","url","then","resp","json","jResponse","tableData","content","row","col","j","v","push","appendRows","registerConnector","exec","connectionName","submit","setTimeout","onClick","href","prefix","float","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6LAgBaA,EAAc,SAACC,EAAUC,GACpC,MAAU,MAAND,GAAmB,KAANA,EACRA,EAAEE,QAAQ,YAAa,KAIzB,aAAeD,GCjBlBE,G,KAAMC,4CAuEGC,EArEF,SAACC,GAA8C,IAClDC,EAAWD,EAAXC,OACAC,EAAYD,EAAZC,QAEFC,EAAcC,QAAQC,gBAG5BF,EAAYG,UAAY,SACtBC,GAIAA,EAFsBL,EAAQM,KAAI,SAACC,GAAD,ODwCN,SAACC,GAAD,MAA+B,CAC7DC,GAAID,EAAOC,GACXC,MAAOF,EAAOE,MACdC,SAX6CC,EAWLJ,EAAOG,QAX0CC,EAASN,KAAI,SAACO,EAAepB,GACtH,MAAO,CACLgB,GAAIlB,EAAYsB,EAAEC,KAAMrB,GACxBiB,MAAOG,EAAEC,KACTC,SAAUF,EAAEG,MAAQd,QAAQe,aAAaC,aAJC,IAACN,EChCFO,CAAmBZ,QAM9DN,EAAYmB,QAAU,SACpBC,EACAC,GAEAtB,EAAQM,KAAI,SAACC,GACX,GAAIc,EAAME,UAAUd,KAAOF,EAAEE,GAAI,CAC/B,IAAMe,EAAuB,CAC3BC,OAAQlB,EAAEkB,QAGZC,MAAMnB,EAAEoB,IAAKH,GAASI,MAAK,SAACC,GAC1BA,EAAKC,OAAOF,MAAK,SAACG,GAChB,IAAMC,EDPuB,SAAC,EAAgCpB,GAAwC,IAAD,mBAAnEqB,GAAmE,WAEzGD,EAAwB,GAgB9B,OAbAC,EAAQ3B,KAAI,SAAA4B,GACV,IAAMrB,EAAyB,GAS/B,OAPAD,EAASN,KAAI,SAAC6B,EAAiBC,GAC7B,IAAMC,EAAYH,EAAIE,GAEtB,OADAvB,EAAEtB,EAAY4C,EAAIrB,KAAMsB,IAAMC,GACvB,KAGTL,EAAUM,KAAKzB,IACR,KAGFmB,ECXqBb,CAA4BY,EAAWxB,EAAEI,SAC3DU,EAAMkB,WAAWP,GACjBV,UAKN,OAAO,MAIXpB,QAAQsC,kBAAkBvC,GAE1B,IAAMwC,EAAO,WACXvC,QAAQwC,eAAiB3C,EAAOe,KAChCZ,QAAQyC,UAQV,OAJAC,YAAW,WACTH,MACC,KAGD,oCACE,4IAIA,4BAAQhC,GAAG,eAAeoC,QAASJ,GAAnC,wBAGA,2BACE,+BACE,uBAAGK,KAjEF,wDAiEanD,GAAMA,OC1CxBI,EAAkB,CAACe,KAAM,eAAgBd,QADpB,CARF,CACvBS,GAAI,WACJC,MAAO,gBACPiB,IALUoB,+BAMVtB,OAAQ,MACRd,QAlB4B,CAC5B,CAACG,KAAM,MAAOE,KAAMd,QAAQe,aAAa+B,OACzC,CAAClC,KAAM,OACP,CAACA,KAAM,SACP,CAACA,KAAM,QACP,CAACA,KAAM,QACP,CAACA,KAAM,OACP,CAACA,KAAM,aAkBM,oBAAM,kBAAC,EAAD,CAAMf,OAAQA,KClBfkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,+FACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a2e5a7ec.chunk.js","sourcesContent":["// index.ts\nimport * as T from './type';\n//import tableau from './tableau.d';\n\n// Read a page's GET URL variables and return them as an associative array.\nexport const getParameterByName = (name:string, url?:string):string |null => {\n  if (!url) url = window.location.href;\n  name = name.replace(/[[]]/g, '\\\\$&');//name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n      results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\n// tableau needs \"well-formatted\" object keys. This function helps turn any key/string into a tableau-ok object key\nexport const strSanitize = (s:string, i?:number | string):string => {\n  if (s !== ' ' && s !== '') {\n    return s.replace(/[^\\w\\d_]/g, '_');\n    //.replace(/ /g, '_').replace('/test', '_').replace('?', '_').replace('\\'', '_').replace('(', '_').replace(')', '_');\n  }\n\n  return 'undefined_' + i;\n}\n\n// map the output of the array strcuture onto a tableau compatible structure\n// param resp: response of the ajax call (which is an array of arrays)\n// pararm colLabel: the headers pre defined (note that this is also the first row of the rerponse)\nexport const mapArrayOntoTableauStruct = ([_, content]:T.ServiceResponse, colLabel:T.ColumnDef[]):T.Value[][] => {\n  // init output table\n  const tableData:T.Value[][] = [];\n\n  // Iterate over the array\n  content.map(row => {\n    const c:{[k:string]:T.Value} = {};\n\n    colLabel.map((col:T.ColumnDef, j:number) => {\n      const v:T.Value = row[j];\n      c[strSanitize(col.name, j)] = v;\n      return true;\n    })\n\n    tableData.push(c as unknown as T.Value[]); // casting here otherwise does not work with TS definitions\n    return true;\n  });\n\n  return tableData;\n}\n\nexport const tableauColumnsFromArrayHeaders = (colLabel:T.ColumnDef[]):T.SchemaColumn[] => colLabel.map((c:T.ColumnDef, i:number) => {\n  return {\n    id: strSanitize(c.name, i),\n    alias: c.name,\n    dataType: c.type || tableau.dataTypeEnum.string\n  }\n});\n\nexport const schemaFromReport = (report:T.Report):T.Schema => ({\n  id: report.id,\n  alias: report.alias,\n  columns: tableauColumnsFromArrayHeaders(report.columns)\n});\n","import React from \"react\";\nimport * as T from \"./type\";\nimport * as U from \"./utils\";\n\nconst gh = \"https://github.com/Nexysweb/tableau-wdc-react/commit/\";\nconst sha = process.env.REACT_APP_GIT_SHA || \"git_sha_undefined\";\n\nconst init = (props: { config: T.Config }): JSX.Element => {\n  const { config } = props;\n  const { reports } = config;\n  // Create the connector object\n  const myConnector = tableau.makeConnector();\n\n  // Define the schema\n  myConnector.getSchema = function (\n    schemaCallback: (tableInfo: tableau.TableInfo[]) => void\n  ) {\n    const r: T.Schema[] = reports.map((r) => U.schemaFromReport(r));\n\n    schemaCallback(r);\n  };\n\n  // Download the data\n  myConnector.getData = function (\n    table: tableau.Table,\n    doneCallback: tableau.DataDoneCallback\n  ) {\n    reports.map((r) => {\n      if (table.tableInfo.id === r.id) {\n        const options: RequestInit = {\n          method: r.method,\n        };\n\n        fetch(r.url, options).then((resp: Response) => {\n          resp.json().then((jResponse: T.ServiceResponse) => {\n            const tableData = U.mapArrayOntoTableauStruct(jResponse, r.columns);\n            table.appendRows(tableData);\n            doneCallback();\n          });\n        });\n      }\n\n      return true;\n    });\n  };\n\n  tableau.registerConnector(myConnector);\n\n  const exec = (): void => {\n    tableau.connectionName = config.name; // This will be the data source name in Tableau\n    tableau.submit(); // This sends the connector object to Tableau\n  };\n\n  // execute exec after one second\n  setTimeout(function () {\n    exec();\n  }, 1000);\n\n  return (\n    <>\n      <p>\n        This page should disappear once data is loaded, if (and only if) this\n        does not work click on the button below\n      </p>\n      <button id=\"submitButton\" onClick={exec}>\n        Get data and connect\n      </button>\n      <p>\n        <small>\n          <a href={gh + sha}>{sha}</a>\n        </small>\n      </p>\n    </>\n  );\n};\n\nexport default init;\n","import React from 'react';\n\nimport { T, Init } from './lib';\n\n// start parameters definition\nconst columns:T.ColumnDef[] = [\n  {name: 'one', type: tableau.dataTypeEnum.float},\n  {name: 'two'},\n  {name: 'three'},\n  {name: 'four'},\n  {name: 'five'},\n  {name: 'six'},\n  {name: 'seven'}\n];\n\nconst prefix = '/tableau-wdc-react'; // note this is required for GH pages\nconst url = prefix + '/data.json'\n\nconst report1:T.Report = {\n  id: 'dataFeed',\n  alias: 'dataFeedAlias',\n  url,\n  method: 'GET',\n  columns\n};\n\nconst reports:T.Report[] = [report1];\nconst config:T.Config = {name: 'My Data Feed', reports};\n// end parameters defintion\n\nexport default () => <Init config={config}/>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './example';\n//import App from './lib/tssaconnector'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <p>Make sure this page is run from either Tableau or the simmulator</p>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}